---
title: "Robocar"
subtitle: "Mobiles Robotikprojekt I"
author: "Lars Schwarz"
date: last-modified
lang: de

title-block-banner: blue
format:
  revealjs: 
    scrollable: true
    multiplex: true
    transition: slide
    transition-speed: fast
    html-math-method: mathjax
    slide-number: true
    show-slide-number: all
    progress: false
    history: true
    chalkboard: true
    preview-links: auto
---

# Übersicht
:::: {.columns}

::: {.column}
![Sketch](res/img/Sketch.jpg){#fig-Sketch}
:::
::: {.column}
::: {.incremental}
- Ferngesteuertes RC-Auto
- Teil-/Vollautonom 
:::
:::

::::

# Mechanik
:::: {.columns}

::: {.column}
![Fusion-Export](res/img/Fusion.png){#fig-fusion-export}
:::

::: {.column}
::: {.incremental}
- Neue Grundplatte
- Batteriehalter
- ToF-Kamerahalter
- ToF-Spot-Halter
- Beleuchtungsring VFS
:::
:::
::::

# Elektronik
:::: {.columns}

::: {.column}
::: {.panel-tabset group="language"}

## Vorderseite
![Vorderseite](res/img/PCB_front.png){#fig-pcb-front width=75%}

## Rückseite
![Rückseite](res/img/PCB_back.png){#fig-pcb-back width=75%}

:::
:::

::: {.column}
::: {.incremental}
- Platzsparend
- Keine Steckmodule
:::

::: {.fragment}
**Fehler**

- RX/TX für debugging vertauscht
:::

::: {.fragment}
**Siliziumhimmel**

- 1 Mikrocontroller
- 4 H-Brücken
:::

:::

::::



# Software
![Comments](res/img/good_code.jpeg){#fig-comment}

## Softwareaufbau
::: {.incremental}
- 3 Verschiedene Oberflächen
  - **Firmware**: STM32 in C++
  - **Firmware**: ESP32 in C++
  - **GUI**: Robocar Visualisierung in [Typescript](https://www.typescriptlang.org/)
- Eigene Softwaremodule für jede Hardwarekomponente
  
  :::: {.columns}
  ::: {.column}
    - IMU
    - ToF-Kamera
    - Visual-Flow-Sensor
  :::
  ::: {.column}
    - Neopixel
    - Servo
    - H-Brücke
  :::
  ::::
:::


## Kommunikation mit GUI
```{mermaid}
sequenceDiagram
    participant STM32
    participant ESP32
    participant Laptop

    Note over ESP32,STM32: SPI fullduplex

    loop Sync
      ESP32 -> STM32: package TX/RX
    end

    loop Sample
      ESP32 ->> Laptop: EUI read package
    end

    Laptop ->> ESP32: EUI write package

    Note over ESP32,Laptop: UART
```

## Regelung
$$x_{\text{a}}(t) = K_{\text{p}} \cdot x_{\text{e}}(t) + K_{\text{i}} \cdot \int x_{\text{e}}(t) \, \mathrm{d} t + K_{\text{d}} \cdot \dot x_{\text{e}}(t) $$

::: {.fragment}
:::: {.columns}
::: {.column}
![Sprungantwort](res/img/pid.webp){#fig-sprungantwort}
:::

::: {.column}
::: {.incremental}
- Geschwindigkeit
- Abstand zu Objekt
- Tuning von $K_{\text{p}}, K_{\text{i}}, K_{\text{d}}$
:::
:::
:::
::::

## Falsches Tuning

{{< video res/data/PID.mov >}}

## Codestats {auto-animate=true}
```{mermaid}
%%{init: {"pie": {"textPosition": 0.5}} }%%
   pie
    title Eigene Codezeilen
    "STM32 ca. 2'500" : 2500
    "ESP32 ca. 900" : 900
    "GUI ca. 3'300" : 3300
```

## Codestats {auto-animate=true}
```{mermaid}
%%{init: {"pie": {"textPosition": 0.5}} }%%
pie title Anzahl Codezeilen
    "Eigene STM32 ca. 2'500" : 2500
    "Eigene ESP32 ca. 900" : 900
    "Eigene GUI ca. 3'300" : 3300
    "STM32 ca. 33'500" : 33500
    "ESP32 ca. 16'100" : 16100
    "GUI ca. 236'700" : 236700
```

# Demonstration

# Fragen