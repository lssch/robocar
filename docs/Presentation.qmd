---
title: "Robocar"
subtitle: "Mobiles Robotikprojekt I"
author: "Lars Schwarz"
date: last-modified
lang: de

title-block-banner: blue
format:
  revealjs: 
    scrollable: true
    multiplex: true
    transition: slide
    transition-speed: fast
    html-math-method: mathjax
    slide-number: true
    show-slide-number: all
    progress: false
    history: true
    chalkboard: true
---

:::{.callout-note title=todo}
- Code stats
- Defekte Komponenten Stats
- 
:::

# Übersicht
 

# Hardware

![Fusion-Export](res/img/Robocar_Fusion.png){#fig-fusion-export fig-align="center" width=80%}

# Elektronik
::: {#fig-pcb layout-ncol=2}
![Vorderseite](res/img/PCB_front.jpg){#fig-pcb-front}

![Rückseite](res/img/PCB_back.jpg){#fig-pcb-back}

PCB
:::

# Software
![Comments](res/img/good_code.webp){#fig-comment}

## Softwareaufbau
- Objektorientiert in C++
- 3 Verschiedene Oberflächen

| Komponente | Typ | Softwaremodul |
|:------|:------|:------:|
| [STM32](https://invensense.tdk.com/products/motion-tracking/6-axis/mpu-6050/) | Firmware | [Github](https://github.com/lssch/STM32_Robocar_FW/tree/main/Core/Inc/mpu60X0) |
| [ESP32](https://invensense.tdk.com/products/motion-tracking/6-axis/mpu-6050/) | Firmware | [Github](https://github.com/lssch/STM32_Robocar_FW/tree/main/Core/Inc/mpu60X0) |
| [Robocar visualisation](https://invensense.tdk.com/products/motion-tracking/6-axis/mpu-6050/) | GUI | [Github](https://github.com/lssch/STM32_Robocar_FW/tree/main/Core/Inc/mpu60X0) |

- Eigene Softwaremodule für jede Hardwarekomponente

| Komponente | Modulname | Softwaremodul |
|:------|:------|:------:|
| [IMU](https://invensense.tdk.com/products/motion-tracking/6-axis/mpu-6050/) | MPU60X0 | [Github](https://github.com/lssch/STM32_Robocar_FW/tree/main/Core/Inc/mpu60X0) |
| [ToF-Kamera](https://wiki.sipeed.com/hardware/en/maixsense/index.html) | A010 | [Github](https://github.com/lssch/STM32_Robocar_FW/tree/main/Core/Inc/A010) |
| ToF-Sensor | TFLC02 | [Github](https://github.com/lssch/TFLC02) |
| [Visual-Flow-Kamera](https://www.mouser.ch/ProductDetail/Broadcom-Avago/ADNS-3080?qs=RuhU64sK2%252Bsop/60ZpFX6g%3D%3D) | ADNS3080 | [Github](https://github.com/lssch/ADNS3080) |
| [Neopixel](https://learn.adafruit.com/adafruit-neopixel-uberguide/the-magic-of-neopixels) | WS2812/SK6812 | [Github](https://github.com/lssch/NeoPixel) |
| Servo | MG90| [Github](https://github.com/lssch/Servo) |
| [H-Brücke](https://toshiba.semicon-storage.com/info/TB6612FNG_datasheet_en_20141001.pdf?did=10660&prodName=TB6612FNG) | TB6612FNG | [Github](https://github.com/lssch/TB6612FNG) |

- GUI in [Typescript](https://www.typescriptlang.org/)

# Stats {auto-animate=true auto-animate-easing="ease-in-out"}
```{mermaid}
pie title Anzal geschriebene Codezeilen
    "STM32 ca. 2'500" : 2500
    "ESP32 ca. 900" : 900
    "GUI ca. 3'300" : 3300
```

## {auto-animate=true auto-animate-easing="ease-in-out"}
:::: {.columns}

::: {.column}

```{mermaid}
pie title Anzal geschriebene Codezeilen
    "STM32 ca. 2'500" : 2500
    "ESP32 ca. 900" : 900
    "GUI ca. 3'300" : 3300
```
:::

::: {.column}
```{mermaid}
pie title Anzahl Codezeilen
    "Eigene STM32 ca. 2'500" : 2500
    "Eigene ESP32 ca. 900" : 900
    "Eigene GUI ca. 3'300" : 3300
    "STM32 ca. 33'500" : 33500
    "ESP32 ca. 16'100" : 16100
    "GUI ca. 236'700" : 236700
```
:::

::::




## Vernsteuerung
Das Robocar ist zur Zeit nicht in der Lage Drahtlos verngestuerert zu werden. Dies kann jedoch mit geringem Aufwand implementiert werden, sobald das nächste Update von [Electricui](https://electricui.com/) puliziert wird. (Anfangs des Projektes wurde bei den Entwicklern nachgefragt und ein Release sollte bis Ende Dezember sichergestellt sein.)

## Kommunkation zwischen den Mikrocontrollern
Die Kommunikaiton zwischen den Mikrocontrollern ist hochgradig ineffizient und könnte um einiges datensparender implementiert werden. Dadurch würden sich auch die Zugriffszeiten von der GUI zum ESP32 verringern, was eine höhere Aktualisierungsrate ermöglicht.

Zur Zeit werden immer alle Bytes der gesammten Datenstruktur übertragen, auch wenn nur ein Teil der Datenstruktur angefragt wurde. Ein Grossteil davon macht das Kamerabild der ToF-Kamera aus, was bis zu 10'000 Bytes betragen kann.

## Visualisierung
Die Visualisierung wurde nicht kompiliert um ohne Entwicklungsumgebung zu funktioniern. Dies kann jedoch nachträglich für alle gänigen Platformen gemacht werden.