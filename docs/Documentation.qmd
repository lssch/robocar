---
title: "Dokumentiation Robocar"
subtitle: "Mobiles Robotikprojekt I"
author: "Lars Schwarz"
date: last-modified

title-block-banner: blue

toc: true
number-sections: false
highlight-style: pygments

format:
  html:
    code-fold: true
    code-tools:
      source: false
      toggle: true
    code-line-numbers: true
    code-overflow: scroll
    html-math-method: mathjax
  pdf:
    pdf-engine: pdflatex
    latex-auto-install: true
    documentclass: article
    papersize: a4
    geometry:
      - left=2cm
      - right=2cm
      - top=2cm
      - bottom=2cm
    header-includes:
      - \usepackage{bbold}
      - \usepackage{float}
      - \floatplacement{figure}{H}
      - \newcommand{\N}{\mathbb{N}}
      - \newcommand{\Z}{\mathbb{Z}}
      - \newcommand{\Q}{\mathbb{Q}}
      - \newcommand{\R}{\mathbb{R}}
      - \newcommand{\C}{\mathbb{C}}
      - \newcommand{\D}{\mathbb{D}}
      - \newcommand{\W}{\mathbb{W}}
      - \newcommand{\M}{\mathbb{M}}
      - \newcommand{\K}{\mathbb{K}}
      - \newcommand{\e}{\mathrm{e}}
      - \renewcommand{\i}{\mathrm{i}}
      - \renewcommand{\j}{\mathrm{j}}
      - \newcommand{\dd}{\,\mathrm{d}}
      - \newcommand{\pp}{\partial}
      - \newcommand{\NA}{\text{N/A}}
      - \newcommand{\ul}[1]{\underline{#1}}
      - \newcommand{\uul}[1]{\underline{\underline{#1}}}
      - \renewcommand{\vec}[1]{\boldsymbol{\mathrm{#1}}}
      - \newcommand{\uvec}[1]{\boldsymbol{\hat{\mathrm{#1}}}}
      - \newcommand{\abs}[1]{\left\vert#1\right\vert}
      - \newcommand{\vabs}[1]{\left\vert\left\vert#1\right\vert\right\vert}
      - \renewcommand{\angle}[1]{\left\langle#1\right\rangle}
      - \newcommand{\ceil}[1]{\left\lceil#1\right\rceil}
      - \newcommand{\floor}[1]{\left\lfloor#1\right\rfloor}
      - \newcommand{\sgn}[1]{\operatorname{sgn}\left(#1\right)}
      - \renewcommand{\Re}[1]{\operatorname{Re}\left(#1\right)}
      - \renewcommand{\Im}[1]{\operatorname{Im}\left(#1\right)}
      - \newcommand{\cis}[1]{\operatorname{cis}\left(#1\right)}
      - \renewcommand{\arg}[1]{\operatorname{arg}\left(#1\right)}
      - \renewcommand{\div}[1]{\operatorname{div}\left(#1\right)}
      - \newcommand{\rot}[1]{\operatorname{rot}\left(#1\right)}
      - \newcommand{\tr}[1]{\operatorname{tr}\left(#1\right)}
      - \renewcommand{\det}[1]{\operatorname{det}\left(#1\right)}
      - \newcommand{\spec}[1]{\operatorname{Spec}\left(#1\right)}
      - \renewcommand{\dim}[1]{\operatorname{dim}\left(#1\right)}
      - \newcommand{\img}[1]{\operatorname{img}\left(#1\right)}
      - \renewcommand{\ker}[1]{\operatorname{ker}\left(#1\right)}
---

# Einführung
Diese Dokumentaiton dient zur Bedienung und Weiterentlwicklung des "Robocars", welches im Rahmen des [Mobile Robotics Projekt 1](https://www.fhgr.ch/fileadmin/studium/bachelorangebot/mobile_robotics/FHGR-Bachelorstudium-Mobile_Robotics-Moduluebersicht.pdf#page=21) an der [FHGR](https://fhgr.ch) während dem 3. Semester entwickelt wurde.


::: {.callout-important title="TODO"}
Bild des Robocars
:::

::: {.callout-note title="Info"}
Diese Dokumentation soll als Zusatz dienen und nicht als Ersatz für die Sourcecode Dokumentaiton.

Dieses Dokument wurde mit [Quarto-Markdown](https://quarto.org) erstellt und ist sowol in PDF als auch in HTML verfügbar.
:::


# Übersicht
Das Robocar basiert auf einem stark modifiziertem Chassis von [YF-Robot](https://yfrobot.com/collections/robot-kits/products/steering-gear-robot) und verwendet einen [STM-32F446RE](https://www.st.com/en/microcontrollers-microprocessors/stm32f446re.html) Mikrocontroller, welcher auf einem eigen dafür entrofenem PCB mit verschiedenen Perepherien ([M5Stack ESP32-S3](https://docs.m5stack.com/en/core/StampS3), [IMU](https://invensense.tdk.com/products/motion-tracking/6-axis/mpu-6050/), [ToF-Kamera](https://wiki.sipeed.com/hardware/en/maixsense/index.html), [ToF-Sensor](), [Visual-Flow-Kamera](https://www.mouser.ch/ProductDetail/Broadcom-Avago/ADNS-3080?qs=RuhU64sK2%252Bsop/60ZpFX6g%3D%3D)) kommuniziert.

Das Robocar soll mittels sehr günstiger Hardware in der lage sein verngesteuert zu werden und als weiterführende Ziele gewisse Assistenzfunktionen wie Kollisionsdetektion und Spurhalteasistenz verfügen. Weiter soll eine einfache Kollisionsverhinderung mittels ausweichmanöver implementiert sein.

# Handbuch
## Benötigte Komponenten

- Robocar
- Geladene Batterien!
- Laptop mit GUI-Applikation

::: {.callout-tip title="Tip"}
    Sicherstellen, dass die Batterien ganz geladen sind.
:::

## Hardware

1. Geladene Batterien in den Batteriehalter einsetzen.
2. Batteriehalter in die vorgesehene Halterung einstzen.
3. Batteriestecker XT30 mit dem PCB verbinden.
4. Robocar am Hauptschalter einschalten.

::: {.callout-important title="Vorsicht"}
    Beim Einsetzen der Batteriehalterung in die Vorgesehene Halterung auf dem Robocar soll darauf geachtet werden, dass die Litzen des ToF-Spot Sensors nicht gequetscht werden!
:::

## GUI 
Über die GUI können alle Sensordaten live abgefragt werden und alle Parameter persistent verändert werden.

1. GUI-Applikation starten
2. Verbindung mit dem Robocar über WIFI/Bluetooth oder Serial (Kabelgebunden) herstellen.

## Spass haben
Folgende Betriebsmodis wurden implementiert:

- **Manuelles verfahren**: Das Robocar kann mittels Slider in der GUI oder dem Controller verfahren werden.
- **Assistiertes verfahren**: Das Robocar kann mittel Slider in der GUI oder dem Controller verfahren werden unter Berücksichtigung der Spurhaltefunktion.
- **Distanz-Modus**: Das Robocar fährt auf ein Objekt zu und haltet bei einer gewissen Distanz vor dem Objekt automatisch an.
- **Kollisionsverhinderung**: Das Robocar umfährt selbstständig Hindernisse ohne Eingreifen einer Drittperson.

# Hardware

![Fusion-Export](res/img/Robocar_Fusion.png){#fig-fusion-export fig-align="center" width=80%}

# Elektronik
::: {.callout-important title="TODO"}
- Beschreibung der gesammten Elektronik
- Beschreibung der Elektronikblöcke mit Einzelheiten zur Dimensionierung
:::

Die Elektronik basiert auf einem eigens entworenem PCB. Auf dem PCB wird die gesammte Spannungsregelung sowie Spannungverteilung an die jewiligen Perepherien geregelt sowie die Kommunikaiton mit dem Mikrocontroller realisiert.

::: {#fig-pcb layout-ncol=2}
![Vorderseite](res/img/PCB_front.jpg){#fig-pcb-front}

![Rückseite](res/img/PCB_back.jpg){#fig-pcb-back}

PCB
:::

## Blockschaltbild

## Schema & PCB-Design
::: {#fig-Schema layout-ncol=2}
![Mikrocontroller](res/img/Schematic_1.jpg){#fig-Schema-Mikrocontroller}

![Perepherie](res/img/Schematic_2.jpg){#fig-Schema-Perepherie}

Schema
:::



## Spannungsversorgung
::: {#fig-ripple layout-ncol=2}
![KO](res/img/Measurement_ripple_5V.png){#fig-ripple-1}

![KO Ausschnitt](res/img/Measurement_ripple_5V_zoomed.png){#fig-ripple-2}

Spannungsrippel
:::



# Software

::: {.callout-important title="TODO"}
- Beschreibung der Software mit Flussdiagramm.
- Beschreibung der Funktionalität des Roboters
- Kurze Beschreibung der Funktionen mit Eingangs/Ausgangsparametern
- Was ist noch zu programmieren?
:::

## Softwareaufbau

## Flussdiagramm

## Funktionalität

## Modulbeschreibungen
Die einzelnen Modulbeschreibungen können den jewiligen `.hpp` Source-Dokumenten als [Doxygen](https://www.doxygen.nl) entnommen werden und werden hier nicht explizit aufgeführt.

# Stand der Dinge

## Vernsteuerung
Das Robocar ist zur Zeit nicht in der Lage Drahtlos verngestuerert zu werden. Dies kann jedoch mit geringem Aufwand implementiert werden, sobald das nächste Update von [Electricui](https://electricui.com/) puliziert wird. (Anfangs des Projektes wurde bei den Entwicklern nachgefragt und ein Release sollte bis Ende Dezember sichergestellt sein.)

## Kommunkation zwischen den Mikrocontrollern
Die Kommunikaiton zwischen den Mikrocontrollern ist hochgradig ineffizient und könnte um einiges datensparender implementiert werden. Dadurch würden sich auch die Zugriffszeiten von der GUI zum ESP32 verringern, was eine höhere Aktualisierungsrate ermöglicht.

Zur Zeit werden immer alle Bytes der gesammten Datenstruktur übertragen, auch wenn nur ein Teil der Datenstruktur angefragt wurde. Ein Grossteil davon macht das Kamerabild der ToF-Kamera aus, was bis zu 10'000 Bytes betragen kann.

## Visualisierung
Die Visualisierung wurde nicht kompiliert um ohne Entwicklungsumgebung zu funktioniern. Dies kann jedoch nachträglich für alle gänigen Platformen gemacht werden.